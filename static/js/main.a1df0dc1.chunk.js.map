{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","variables/variables.ts","components/PeopleFilters.tsx","types/SortType.ts","components/PersonLink.tsx","components/SortLink.tsx","components/PeopleTable.tsx","api.ts","utils/filterPeople.ts","components/Loader/Loader.tsx","pages/PeoplePage.tsx","components/Navbar.tsx","pages/NotFoundPage.tsx","pages/Homepage.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","Sex","Centuries","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","paramCenturies","century","includes","filter","item","className","classNames","All","male","female","type","placeholder","onChange","event","target","trim","map","length","SortType","PersonLink","person","userSlug","useParams","slug","name","born","died","mother","motherName","father","fatherName","SortLink","sortField","sortBy","isReversed","isSelected","sort","order","PeopleTable","people","loading","values","slice","toUpperCase","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","Loader","PeoplePage","useState","setPeople","error","setError","setLoading","filteredPeople","useMemo","visiblePeople","lowerCaseQuery","toLowerCase","String","Math","ceil","person1","person2","NAME","SEX","localeCompare","BORN","DIED","reverse","getFilteredPeople","fetchPeople","peopleFromServer","peopleWithParents","find","useEffect","getLinkClass","isActive","Navbar","role","NotFoundPage","HomePage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a1df0dc1.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum Sex {\n  male = 'm',\n  female = 'f',\n  All = '',\n}\n\nexport const Centuries = ['16', '17', '18', '19', '20'];\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { Centuries, Sex } from '../variables/variables';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const paramCenturies = (century: string) => {\n    return centuries.includes(century)\n      ? centuries.filter(item => item !== century)\n      : [...centuries, century];\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(\n      searchParams, { query: event.target.value.trim() || null },\n    );\n\n    setSearchParams(search);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sex })}\n          params={{ sex: Sex.All }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({ 'is-active': sex === Sex.male })}\n          params={{ sex: Sex.male }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({ 'is-active': sex === Sex.female })}\n          params={{ sex: Sex.female }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {Centuries.map(century => (\n              <SearchLink\n                key={century}\n                className={classNames(\n                  'button mr-1',\n                  { 'is-info': centuries.includes(century) },\n                )}\n                data-cy=\"century\"\n                params={{ centuries: paramCenturies(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button is-success',\n                { 'is-outlined': centuries.length > 0 },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            query: null,\n            centuries: null,\n            sex: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","export enum SortType {\n  NAME = 'name',\n  SEX = 'sex',\n  BORN = 'born',\n  DIED = 'died',\n}\n","import { Link, useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { userSlug } = useParams();\n\n  return (\n    <>\n      <tr\n        data-cy=\"person\"\n        className={classNames({\n          'has-background-warning': person.slug === userSlug,\n        })}\n      >\n        <td>\n          <Link\n            to={`/people/${person.slug}`}\n            className={classNames({ 'has-text-danger': person.sex === 'f' })}\n          >\n            {person.name}\n          </Link>\n        </td>\n\n        <td>{person.sex}</td>\n        <td>{person.born}</td>\n        <td>{person.died}</td>\n        <td>\n          {person.mother ? (\n            <Link\n              to={`/people/${person.mother.slug}`}\n              className=\"has-text-danger\"\n            >\n              {person.motherName}\n            </Link>\n          ) : (person.motherName || '-')}\n        </td>\n        <td>\n          {person.father ? (\n            <Link\n              to={`/people/${person.father.slug}`}\n            >\n              {person.fatherName}\n            </Link>\n          ) : (person.fatherName || '-')}\n        </td>\n      </tr>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  sortField: string,\n};\n\nexport const SortLink: React.FC<Props> = ({ sortField }) => {\n  const [searchParams] = useSearchParams();\n  const sortBy = searchParams.get('sort') || '';\n  const isReversed = searchParams.get('order') === 'desc';\n  const isSelected = sortBy === sortField;\n\n  return (\n    <SearchLink params={{\n      sort: isSelected && isReversed\n        ? null\n        : sortField,\n\n      order: isSelected && !isReversed\n        ? 'desc'\n        : null,\n    }}\n    >\n\n      <span className=\"icon\">\n        <i className={classNames('fas', {\n          'fa-sort': !isSelected,\n          'fa-sort-up': isSelected && !isReversed,\n          'fa-sort-down': isSelected && isReversed,\n        })}\n        />\n      </span>\n    </SearchLink>\n  );\n};\n","import { Person } from '../types';\nimport { SortType } from '../types/SortType';\nimport { PersonLink } from './PersonLink';\nimport { SortLink } from './SortLink';\n\ntype Props = {\n  people: Person[],\n  loading: boolean,\n};\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  loading,\n}) => {\n  return (\n    <>\n      {(!loading && !people.length) && (\n        <p>\n          There are no people matching the current search criteria\n        </p>\n      )}\n\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n        <thead>\n          <tr>\n            {Object.values(SortType).map(value => (\n              <th key={value}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {`${value.slice(0, 1).toUpperCase()}${value.slice(1)}`}\n\n                  <SortLink sortField={value} />\n                </span>\n              </th>\n            ))}\n\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {people.map(person => (\n            <PersonLink\n              key={person.slug}\n              person={person}\n            />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\nimport { SortType } from '../types/SortType';\n\nexport const getFilteredPeople = (\n  people: Person[],\n  sex: string,\n  query: string,\n  sortBy: string,\n  order: string,\n  centuries: string[],\n) => {\n  let visiblePeople = [...people];\n\n  if (query) {\n    visiblePeople = visiblePeople.filter(person => {\n      const lowerCaseQuery = query.toLowerCase();\n      const needSymbolsToCheck = (\n        person.name + person.fatherName + person.motherName).toLowerCase();\n\n      return needSymbolsToCheck.includes(lowerCaseQuery);\n    });\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length > 0) {\n    visiblePeople = visiblePeople.filter(person => (\n      centuries.includes(String(Math.ceil(person.born / 100)))\n    ));\n  }\n\n  if (sortBy) {\n    visiblePeople.sort((person1, person2) => {\n      switch (sortBy) {\n        case SortType.NAME:\n        case SortType.SEX:\n          return person1[sortBy].localeCompare(person2[sortBy]);\n\n        case SortType.BORN:\n        case SortType.DIED:\n          return person1[sortBy] - person2[sortBy];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order) {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { getFilteredPeople } from '../utils/filterPeople';\nimport { Loader } from '../components/Loader';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [searchParams] = useSearchParams();\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const order = searchParams.get('order') || '';\n  const sortBy = searchParams.get('sort') || '';\n\n  const filteredPeople = useMemo(() => (\n    getFilteredPeople(\n      people,\n      sex,\n      query,\n      sortBy,\n      order,\n      centuries,\n    )\n  ), [sex, query, centuries, sortBy, order]);\n\n  const fetchPeople = async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      const peopleWithParents = peopleFromServer.map(person => ({\n        ...person,\n        mother: peopleFromServer.find(\n          mother => mother.name === person.motherName,\n        ),\n        father: peopleFromServer.find(\n          father => father.name === person.fatherName,\n        ),\n      }));\n\n      setPeople(peopleWithParents);\n      setLoading(false);\n    } catch {\n      setError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {loading && <Loader />}\n\n          {error && (\n            <p data-cy=\"peopleLoadingError\">\n              Something went wrong\n            </p>\n          )}\n\n          {!people && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {people.length > 0 && (\n            <>\n              <div className=\"column is-7-tablet is-narrow-desktop\">\n                <PeopleFilters />\n              </div>\n\n              <div className=\"column\">\n                <div className=\"box table-container\">\n                  <PeopleTable\n                    people={filteredPeople}\n                    loading={loading}\n                  />\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const NotFoundPage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","export const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Routes, Route, Navigate } from 'react-router-dom';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { HomePage } from './pages/Homepage';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":user\" element={<PeoplePage />} />\n            </Route>\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}